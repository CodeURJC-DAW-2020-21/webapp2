package es.dawgroup2.juding.posts;

import es.dawgroup2.juding.main.HeaderInflater;
import es.dawgroup2.juding.users.UserService;
import org.hibernate.engine.jdbc.BlobProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.Timestamp;

@Controller
public class AdminPostController {
    @Autowired
    HeaderInflater headerInflater;

    @Autowired
    PostService postService;

    @Autowired
    UserService userService;

    /**
     * This method inflates the all post list view.
     *
     * @param model Post data model.
     * @return All post view.
     */
    @GetMapping("/admin/post/list")
    public String postList(HttpServletRequest request, Model model) {
        Page<Post> postFirstPage = postService.getPostsInPages(0, 10);
        model.addAllAttributes(headerInflater.getHeader("Lista de noticias", request, "bootstrap/css/bootstrap.min.css", "aos/aos.css", "font-awesome/css/all.css", "style", "header", "bootstrapAccomodations", "responsiveTable", "adminScreen"))
                .addAttribute("postPage", postFirstPage.getContent())
                .addAttribute("empty", postFirstPage.getTotalElements() == 0)
                .addAttribute("morePages", postFirstPage.hasNext())
                .addAttribute("totalPages", postFirstPage.getTotalPages());
        return "/admin/post/list";
    }

    /**
     * Returns a inflated page of registered posts.
     *
     * @param page  Number of page requested.
     * @param model Model.
     * @return Inflated page.
     */
    @GetMapping("/admin/post/list/{page}")
    public String getPostPage(@PathVariable String page, Model model) {
        Page<Post> postPage = postService.getPostsInPages(Integer.parseInt(page), 10);
        model.addAttribute("postPage", postPage.getContent());
        return "/admin/post/inflatedListPost";
    }

    /**
     * This method inflates the individual post edit section view.
     *
     * @param model Post data model.
     * @param id    Current post id.
     * @return Individual post edit section view.
     */
    @GetMapping("/admin/post/edit/{id}")
    public String postEdit(@PathVariable String id, HttpServletRequest request, Model model) {
        Post post = postService.findById(id);
        model.addAllAttributes(headerInflater.getHeader("Edici√≥n de noticia", request, "bootstrap/css/bootstrap.min.css", "datepicker/jquery.datetimepicker.min.css", "font-awesome/css/all.css", "style", "header", "bootstrapAccomodations", "post"))
                .addAttribute("post", post);
        return "/admin/post/edit";
    }

    /**
     * This method inflates the post creation view.
     *
     * @return Post creation view.
     */
    @GetMapping("/admin/post/createNew")
    public String newPost(HttpServletRequest request, Model model) {
        model.addAllAttributes(headerInflater.getHeader("Nueva noticia", request, "bootstrap/css/bootstrap.min.css", "datepicker/jquery.datetimepicker.min.css", "font-awesome/css/all.css", "header", "bootstrapAccomodations"));
        return "/admin/post/createNew";
    }

    /**
     * This method creates a new post using the post creation form fields as parameters.
     * Image is optional. If it's not submitted, the previous image will be set.
     * Finally, the new post will be added to database by autogenerated Id.
     *
     * @param title Post title form field.
     * @param image Post image form field.
     * @param body  Post body form field.
     * @return Redirects to all post list view.
     * @throws IOException  In case of the image file input fails.
     * @throws SQLException In case the previous image is not found on database.
     */
    @PostMapping("/admin/post/create")
    public String addNewPost(@RequestParam String title,
                             @RequestParam MultipartFile image,
                             @RequestParam String body,
                             HttpServletRequest request) throws IOException, SQLException {
        postService.save(null, request, title, body, image);
        return "redirect:/admin/post/list";
    }


    /**
     * This method modifies a post (searched by Id) using the post creation form fields as parameters.
     * Image is optional. If it's not submitted, the previous image will be set.
     * Finally, the new post will be update from database.
     *
     * @param id    Current post id.
     * @param title Post title form field.
     * @param image Post image form field.
     * @param body  Post body form field.
     * @return Redirects to all post list view.
     */
    @PostMapping("/admin/post/edit")
    public String updatingPost(@RequestParam String id,
                               @RequestParam String title,
                               @RequestParam MultipartFile image,
                               @RequestParam String body,
                               HttpServletRequest request) {
        postService.save(id, request, title, body, image);
        return "redirect:/admin/post/list";
    }


    /**
     * This method deletes a post (search by Id) form database.
     *
     * @param id Current post id.
     * @return Redirects to all post list view.
     */
    @GetMapping("/admin/post/delete/{id}")
    public String deletePost(@PathVariable String id) {
        postService.deleteById(id);
        return "redirect:/admin/post/list";
    }
}
