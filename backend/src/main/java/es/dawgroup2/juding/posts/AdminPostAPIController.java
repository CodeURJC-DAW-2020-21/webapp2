package es.dawgroup2.juding.posts;

import es.dawgroup2.juding.users.UserService;
import org.hibernate.engine.jdbc.BlobProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.Timestamp;

@RestController
@RequestMapping("/api/admin/post")
public class AdminPostAPIController {

    @Autowired
    PostService postService;

    @Autowired
    UserService userService;

    /**
     * This method inflates the all post list view.
     *
     * @param model Post data model.
     * @return All post view.
     */
    @GetMapping("/list")
    public Page<Post> postList() {
        return postService.getPostsInPages(0, 10);
    }

    /**
     * Returns a inflated page of registered posts.
     *
     * @param model Model.
     * @param page  Number of page requested.
     * @return Inflated page.
     */
    @GetMapping("/list/{page}")
    public Page<Post> getPostPage(@PathVariable String page) {
        return postService.getPostsInPages(Integer.parseInt(page), 10);
    }

    /**
     * This method inflates the individual post edit section view.
     *
     * @param model Post data model.
     * @param id    Current post id.
     * @return Individual post edit section view.
     */
    @GetMapping("/edit/{id}")
    public Post getPostToEdit(@PathVariable String id) {
        return postService.findById(id);
    }

    /**
     * This method creates a new post using the post creation form fields as parameters.
     * Image is optional. If it's not submitted, the previous image will be set.
     * Finally, the new post will be added to database by autogenerated Id.
     *
     * @param title Post title form field.
     * @param image Post image form field.
     * @param body  Post body form field.
     * @return Redirects to all post list view.
     * @throws IOException  In case of the image file input fails.
     * @throws SQLException In case the previous image is not found on database.
     */
    @PostMapping("/createNew")
    public Post addNewPost(@RequestParam String title,
                           @RequestParam MultipartFile image,
                           @RequestParam String body,
                           HttpServletRequest request) throws IOException, SQLException {
        Post post = new Post();
        post.setAuthor(userService.findByNickname(request.getUserPrincipal().getName()))
                .setTitle(title)
                .setBody(body)
                .setTimestamp(new Timestamp(System.currentTimeMillis()));
        if (!image.isEmpty()) {
            post.setImageFile(BlobProxy.generateProxy(image.getInputStream(), image.getSize()));
            post.setMimeImage(image.getContentType());
        }
        return postService.add(post);
    }


    /**
     * This method modifies a post (searched by Id) using the post creation form fields as parameters.
     * Image is optional. If it's not submitted, the previous image will be set.
     * Finally, the new post will be update from database.
     *
     * @param id    Current post id.
     * @param title Post title form field.
     * @param image Post image form field.
     * @param body  Post body form field.
     * @return Redirects to all post list view.
     * @throws IOException  In case of the image file input fails.
     * @throws SQLException In case the previous image is not found on database.
     */
    @PostMapping("/edit/modify")
    public Post updatingPost(@RequestParam String id,
                             @RequestParam String title,
                             @RequestParam MultipartFile image,
                             @RequestParam String body) throws IOException, SQLException {
        Post post = postService.findById(id);
        post.setTitle(title)
                .setBody(body)
                .setTimestamp(new Timestamp(System.currentTimeMillis()));
        if (!image.isEmpty()) {
            post.setImageFile(BlobProxy.generateProxy(image.getInputStream(), image.getSize()));
        } else {
            Post dbPost = postService.findById(id);
            if (dbPost.getImageFile() != null) {
                post.setImageFile(BlobProxy.generateProxy(dbPost.getImageFile().getBinaryStream(),
                        dbPost.getImageFile().length()));
                post.setMimeImage(image.getContentType());
            }
        }
        return postService.updatingInfoPost(post);
    }


    /**
     * This method deletes a post (search by Id) form database.
     *
     * @param id Current post id.
     * @return Redirects to all post list view.
     */
    @GetMapping("/delete/{id}")
    public void deletePost(@PathVariable String id) {
        postService.deleteById(id);
    }
}
