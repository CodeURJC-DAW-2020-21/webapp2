package es.dawgroup2.juding.posts;

import org.hibernate.engine.jdbc.BlobProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

@Controller
public class PostController {

    @Autowired
    PostService postService;


    /*INFLATE VIEWS*/

    /**
     * This method inflates the post box list in index main page.
     * @param model Post data model.
     * @return index main page view.
     */
    @GetMapping("/")
    public String indexPosts(Model model) {
        List<Post> postList = postService.findAll();
        model.addAttribute("postList", postList);
        return "/index";
    }

    /**
     * This method inflates the individual post (shown by Id) visualization view.
     * A list with other post is also shown.
     * @param model Post data model.
     * @param id Current post id.
     * @return Individual post visualization view (news).
     */
    @GetMapping("/news/{id}")
    public String NewsPost(Model model, @PathVariable String id) {
        Post post = postService.findById(id);
        List<Post> postList = postService.findAll();
        postList.remove(post);
        model.addAttribute("post", post);
        model.addAttribute("postList", postList);
        return "/news";
    }

    /**
     * This method inflates the all post list view.
     * @param model Post data model.
     * @return All post view.
     */
    @GetMapping("/admin/post/list")
    public String postList(Model model) {
        List<Post> postList = postService.findAll();
        model.addAttribute("postList", postList);
        return "/admin/post/list";
    }

    /**
     * This method inflates the individual post edit section view.
     * @param model Post data model.
     * @param id Current post id.
     * @return Individual post edit section view.
     */
    @GetMapping("/admin/post/edit/{id}")
    public String postEdit(Model model, @PathVariable String id) {
        Post post = postService.findById(id);
        model.addAttribute("post", post);
        return "/admin/post/edit";
    }

    /**
     * This method inflates the post creation view.
     * @param model Post data model.
     * @return Post creation view.
     */
    @GetMapping("/admin/post/createNew")
    public String newPost(Model model) {
        return "/admin/post/createNew";
    }

    /**
     * This method downloads an individual post image and shows it on a view.
     * @param id Current post id.
     * @return The image to show.
     * @throws SQLException In case of the image is not found on database.
     */
    @GetMapping("/image/{id}")
    public ResponseEntity<Object> downloadImage(@PathVariable String id)
            throws SQLException {
        Post post = postService.findById(id);
        if (post.getImageFile() != null) {
            Resource file = new InputStreamResource(
                    post.getImageFile().getBinaryStream());
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_TYPE, "image/jpeg")
                    .contentLength(post.getImageFile().length())
                    .body(file);
        } else {
            return ResponseEntity.notFound().build();
        }
    }


    /*OBJECTS CREATION*/

    /**
     * This method creates a new post using the post creation form fields as parameters.
     * Image is optional. If it's not submitted, the previous image will be set.
     * Finally, the new post will be added to database by autogenerated Id.
     * @param title Post title form field.
     * @param image Post image form field.
     * @param body Post body form field.
     * @return Redirects to all post list view.
     * @throws IOException In case of the image file input fails.
     * @throws SQLException In case the previous image is not found on database.
     */
    @PostMapping("/admin/post/createNew")
    public String addNewPost(@RequestParam String title,
                             @RequestParam MultipartFile image,
                             @RequestParam String body) throws IOException, SQLException {
        Post post = new Post();
        post.setAuthor("1234567890")
                .setTitle(title)
                .setBody(body)
                .setTimestamp(new Timestamp(System.currentTimeMillis()));
        if (!image.isEmpty()) {
            post.setImageFile(BlobProxy.generateProxy(image.getInputStream(), image.getSize()));
        }
        postService.add(post);
        return "redirect:/admin/post/list";
    }


    /*OBJECTS MODIFICATION*/

    /**
     * This method modifies a post (searched by Id) using the post creation form fields as parameters.
     * Image is optional. If it's not submitted, the previous image will be set.
     * Finally, the new post will be update from database.
     * @param id Current post id.
     * @param title Post title form field.
     * @param image Post image form field.
     * @param body Post body form field.
     * @return Redirects to all post list view.
     * @throws IOException In case of the image file input fails.
     * @throws SQLException In case the previous image is not found on database.
     */
    @PostMapping("/admin/post/edit/modify")
    public String updatingPost(@RequestParam String id,
                               @RequestParam String title,
                               @RequestParam MultipartFile image,
                               @RequestParam String body) throws IOException, SQLException {
        Post post = postService.findById(id);
        post.setTitle(title)
                .setBody(body)
                .setTimestamp(new Timestamp(System.currentTimeMillis()));
        if (!image.isEmpty()) {
            post.setImageFile(BlobProxy.generateProxy(image.getInputStream(), image.getSize()));
        } else {
            Post dbpost = postService.findById(id);
            if (dbpost.getImageFile() != null) {
                post.setImageFile(BlobProxy.generateProxy(dbpost.getImageFile().getBinaryStream(),
                        dbpost.getImageFile().length()));
            }
        }
        postService.updatingInfoPost(post);
        return "redirect:/admin/post/list";
    }


    /*OBJECTS DELETE*/

    /**
     * This method deletes a post (search by Id) form database.
     * @param id Current post id.
     * @return Redirects to all post list view.
     */
    @GetMapping("/admin/post/delete/{id}")
    public String deletePost(@PathVariable String id) {
        postService.deleteById(id);
        return "redirect:/admin/post/list";
    }
}
