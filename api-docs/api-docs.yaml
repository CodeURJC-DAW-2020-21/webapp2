openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/me/myProfile:
    get:
      tags:
      - logged-in-user-api-controller
      summary: Returns logged in user profile data.
      operationId: me
      responses:
        "404":
          description: Currently logged in user was not found.
        "403":
          description: Not allowed (user is not logged in).
        "200":
          description: User profile information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - logged-in-user-api-controller
      summary: Saves new information for some values relating to currently logged
        in user.
      operationId: editingUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileDTO'
        required: true
      responses:
        "200":
          description: User profile information with changed values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Currently logged in user was not found.
        "403":
          description: Not allowed (user is not logged in).
  /api/image/{type}/{id}:
    get:
      tags:
      - image-api-controller
      summary: Gets an entity image.
      operationId: getImage
      parameters:
      - name: type
        in: path
        description: Type of entity (either user or post).
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Entity associated identifier (License ID for users and ID for
          posts).
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Current logged user is not authorized to download this image.
        "404":
          description: Image could not be found (because entity instance does not
            exist or it does not have associated image).
        "400":
          description: Image was not properly processed.
        "200":
          description: Image could be found and is downloaded.
          content:
            image/*: {}
    put:
      tags:
      - image-api-controller
      summary: Changes the image of a user or a post by a new one and updates the
        entity instance.
      operationId: uploadImage
      parameters:
      - name: type
        in: path
        description: Type of entity (either user or post).
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Entity associated identifier (License ID for users and ID for
          posts).
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: Multipart File.
                  format: binary
      responses:
        "403":
          description: Current logged user is not authorized to upload or change this
            image.
        "200":
          description: Image could be found and is downloaded.
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/Post'
        "400":
          description: Image was not properly processed.
  /api/competition/{idCompetition}:
    get:
      tags:
      - competition-api-controller
      summary: Gets a competition using its identifier (ID)
      operationId: showCompetition
      parameters:
      - name: idCompetition
        in: path
        description: Identifier of competition to be obtained
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Obtaining the competition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competition'
        "404":
          description: Request is invalid because of empty or non-existant competition
            retrieve
    put:
      tags:
      - competition-api-controller
      summary: Registration of a user to a competition.
      operationId: joinCompetition
      parameters:
      - name: idCompetition
        in: path
        description: Identifier of the competition
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Join successfully completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competition'
        "500":
          description: Join cannot be made on the basis of failed data.
  /api/competition/control:
    put:
      tags:
      - referee-control-api-controller
      summary: Saves the result of a competition
      operationId: controlCompetition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionResultDTO'
        required: true
      responses:
        "404":
          description: Request is invalid because of non-finished competition retrieve
        "200":
          description: Save successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionResultDTO'
  /api/admin/user/refereeApplication/{licenseId}:
    put:
      tags:
      - admin-user-api-controller
      summary: Process a referee's application and saves it as an official referee.
      operationId: admitReferee
      parameters:
      - name: licenseId
        in: path
        description: License ID of admitted referee.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: New referee's complete information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: Not allowed (there is not logged in user or it is not an administrator).
        "400":
          description: Requested license ID is not registered in the application or
            referee has been admitted before
  /api/admin/user/:
    put:
      tags:
      - admin-user-api-controller
      summary: Saves new information associated with a user and returns the user with
        the new information modified.
      operationId: savingUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserEditionDTO'
        required: true
      responses:
        "403":
          description: Not allowed (there is not logged in user or it is not an administrator).
        "201":
          description: User object with new information saved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/admin/post/:
    get:
      tags:
      - admin-post-api-controller
      summary: Get a list with the posts (paginated)
      operationId: getPostPage
      parameters:
      - name: page
        in: query
        description: Number of page to be searched
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Request is invalid because of empty or non-existant page retrieve
        "200":
          description: Page with more than one post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    put:
      tags:
      - admin-post-api-controller
      summary: Existing post edition
      operationId: updatePost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDTO'
        required: true
      responses:
        "500":
          description: Post cannot be modified on the basis of failed data
        "200":
          description: Edit the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    post:
      tags:
      - admin-post-api-controller
      summary: Post a new post
      operationId: addNewPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDTO'
        required: true
      responses:
        "500":
          description: Post cannot be created on the basis of failed data
        "200":
          description: Creation of a new post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /api/admin/competition/:
    get:
      tags:
      - admin-competition-api-controller
      summary: Get a list with the competitions (paginated)
      operationId: getCompetitionPage
      parameters:
      - name: page
        in: query
        description: Number of page to be searched
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Request is invalid because of empty or non-existant page retrieve
        "200":
          description: Page with more than one competition
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition'
    put:
      tags:
      - admin-competition-api-controller
      summary: Existing competition edition
      operationId: updatingCompetitionInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionDTO'
        required: true
      responses:
        "200":
          description: Edit the competition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionDTO'
        "500":
          description: Competition cannot be modified on the basis of failed data
    post:
      tags:
      - admin-competition-api-controller
      summary: Post a new competition
      operationId: addCompetition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionDTO'
        required: true
      responses:
        "500":
          description: Competition cannot be created on the basis of failed data
        "200":
          description: Creation of a new competition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionDTO'
  /api/signUp/referee:
    post:
      tags:
      - index-api-controller
      summary: Application of a referee (sign up as an applicator).
      operationId: signUpReferee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefereeDTO'
        required: true
      responses:
        "201":
          description: Successful application.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Request could not be completed successfully.
  /api/signUp/competitor:
    post:
      tags:
      - index-api-controller
      summary: Sign up of a competitor.
      operationId: signUpCompetitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitorDTO'
        required: true
      responses:
        "201":
          description: Successful sign up.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Request could not be completed successfully.
  /api/refresh:
    post:
      tags:
      - index-api-controller
      summary: Refreshing of token
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        description: Refresh token
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Refreshing of token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/logout:
    post:
      tags:
      - index-api-controller
      summary: Logout from application and deletion of cookies
      operationId: logOut
      responses:
        "200":
          description: Confirmation of logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/login:
    post:
      tags:
      - index-api-controller
      summary: Login into application (via JWT)
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        description: Access token
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        description: Refresh token
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Login into application (via JWT)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /myCharts:
    get:
      tags:
      - chart-rest-controller
      summary: Returns the required information for building competitor charts FOR
        REST API.
      description: It has to be in a different method because of JWT authentication.
      operationId: competitorChartInformation
      parameters:
      - name: licenseId
        in: query
        description: License ID of competitor.
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Not allowed (there is not logged in user).
        "404":
          description: "Not able to return chart info (user is not a competitor, so\
            \ it doesn't have chart information)."
        "200":
          description: Information for charts in a list.
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
  /competition/{idCompetition}/control/saveResult:
    get:
      tags:
      - referee-control-controller
      operationId: controlCompetition_1
      parameters:
      - name: idCompetition
        in: path
        required: true
        schema:
          type: string
      - name: winner
        in: query
        required: true
        schema:
          type: string
      - name: loser
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/ranking:
    get:
      tags:
      - logged-in-user-api-controller
      summary: Returns a ordered list with some fields of each user for building ranking
        table.
      operationId: getRanking
      responses:
        "200":
          description: List of ranking.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankingDTO'
        "403":
          description: Not allowed (user is not logged in).
  /api/posts:
    get:
      tags:
      - post-api-controller
      summary: Get a simple post
      operationId: newsPost
      parameters:
      - name: id
        in: query
        description: Unique identifier of a post.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Found the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        "404":
          description: Resource not found
  /api/posts/recent:
    get:
      tags:
      - post-api-controller
      summary: Get a recent post list
      operationId: recentNews
      parameters:
      - name: id
        in: query
        description: Post ID to identify it
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Found the list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        "404":
          description: Resource not found
  /api/posts/page:
    get:
      tags:
      - post-api-controller
      summary: Get a list with the posts to view (paginated)
      operationId: getPage
      parameters:
      - name: page
        in: query
        description: Number of page to be searched
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Request is invalid because of empty or non-existant page retrieve
        "200":
          description: Page with more than one post to view
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /api/me/pastCompetitions:
    get:
      tags:
      - logged-in-user-api-controller
      summary: Returns a list of past competitions of currently logged-in user.
      operationId: pastCompetitions
      responses:
        "404":
          description: Currently logged in user was not found.
        "403":
          description: Not allowed (user is not logged in).
        "200":
          description: List of past competitions of currently logged-in user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition_MainAttributes'
  /api/me/myCharts:
    get:
      tags:
      - chart-rest-controller
      summary: Returns the required information for building competitor charts FOR
        REST API.
      description: It has to be in a different method because of JWT authentication.
      operationId: competitorRestChartInformation
      responses:
        "403":
          description: Not allowed (there is not logged in user).
        "404":
          description: "Not able to return chart info (user is not a competitor, so\
            \ it doesn't have chart information)."
        "200":
          description: Information for charts in a list.
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
  /api/me/futureCompetitions:
    get:
      tags:
      - logged-in-user-api-controller
      summary: Returns a list of future competitions of logged-in user.
      description: This method can distinguish if user has joined them or not.
      operationId: futureCompetitions
      parameters:
      - name: joined
        in: query
        description: "True if returning joined future competitions, false otherwise."
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Currently logged in user was not found.
        "200":
          description: List of future competitions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition_MainAttributes'
        "403":
          description: Not allowed (user is not logged in).
  /api/me/currentCompetitions:
    get:
      tags:
      - logged-in-user-api-controller
      summary: Returns a list of current competitions of logged-in user.
      operationId: currentCompetitions
      responses:
        "200":
          description: List of current competitions of logged-in user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition_MainAttributes'
        "404":
          description: Currently logged in user was not found.
        "403":
          description: Not allowed (user is not logged in).
  /api/index-email:
    get:
      tags:
      - index-email-controller
      summary: Sends a email when receiving needed parameters (used via asynchronous
        request).
      operationId: sendEmail
      parameters:
      - name: name
        in: query
        description: Name of sender.
        required: true
        schema:
          type: string
      - name: email
        in: query
        description: Email of sender.
        required: true
        schema:
          type: string
      - name: subject
        in: query
        description: Subject of email.
        required: true
        schema:
          type: string
      - name: message
        in: query
        description: Body of email.
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Email could not be correctly sent.
        "200":
          description: Email was sent properly.
          content:
            application/json: {}
  /api/formCheck/userUpdate:
    get:
      tags:
      - form-validation-rest-controller
      summary: Checks if the data introduced (license ID and nickname) by the user
        are not duplicated in the database.
      description: License ID and nickname have to be unique when updating a user.
      operationId: update
      parameters:
      - name: licenseId
        in: query
        description: License ID of the user.
        required: true
        schema:
          type: string
      - name: nickname
        in: query
        description: Nickname of the user.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Checking was successful.
          content:
            text/plain:
              schema:
                type: integer
  /api/formCheck/newUser:
    get:
      tags:
      - form-validation-rest-controller
      summary: Checks if the data introduced (license ID or nickname) by the user
        are not duplicated in the database.
      description: License ID or nickname have to be unique when signing up.
      operationId: signUp
      parameters:
      - name: licenseId
        in: query
        description: License ID of the user.
        required: true
        schema:
          type: string
      - name: nickname
        in: query
        description: Nickname of the user.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Checking was successful.
          content:
            text/plain:
              schema:
                type: integer
  /api/formCheck/competitionUpdate:
    get:
      tags:
      - form-validation-rest-controller
      summary: Checks if the values introduced by the user are correct when updating
        a competition.
      operationId: checkingUpdatedCompetitionData
      parameters:
      - name: startDate
        in: query
        description: The start date of a competition.
        required: true
        schema:
          type: string
      - name: endDate
        in: query
        description: The end date of a competition.
        required: true
        schema:
          type: string
      - name: minWeight
        in: query
        description: Min Weight introduced.
        required: true
        schema:
          type: string
      - name: maxWeight
        in: query
        description: Max Weight introduced.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Checking was successful.
          content:
            text/plain:
              schema:
                type: integer
  /api/formCheck/competitionCreation:
    get:
      tags:
      - form-validation-rest-controller
      summary: Checks if the values introduced by the user are correct when creating
        a competition.
      operationId: checkingNewCompetition
      parameters:
      - name: startDate
        in: query
        description: The start date of a competition.
        required: true
        schema:
          type: string
      - name: endDate
        in: query
        description: The end date of a competition.
        required: true
        schema:
          type: string
      - name: minWeight
        in: query
        description: Min Weight introduced.
        required: true
        schema:
          type: string
      - name: maxWeight
        in: query
        description: Max Weight introduced.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Checking was successful.
          content:
            text/plain:
              schema:
                type: integer
  /api/admin/user/referees:
    get:
      tags:
      - admin-user-api-controller
      summary: Returns a list with all referees registered in the application (paginated).
      operationId: refereeList
      parameters:
      - name: page
        in: query
        description: Requested page number.
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "403":
          description: Not allowed (there is not logged in user or it is not an administrator).
        "400":
          description: Requested page does not exist.
        "200":
          description: Page with referees.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/admin/user/referees/applications:
    get:
      tags:
      - admin-user-api-controller
      summary: Returns a list with all registered referee applications.
      operationId: applicantList
      responses:
        "200":
          description: List of referee applications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "403":
          description: Not allowed (there is not logged in user or it is not an administrator).
  /api/admin/user/competitors:
    get:
      tags:
      - admin-user-api-controller
      summary: Returns a list with all competitors registered in the application (paginated).
      operationId: competitorList
      parameters:
      - name: page
        in: query
        description: Requested page number.
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Page with competitors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "403":
          description: Not allowed (there is not logged in user or it is not an administrator).
        "400":
          description: Requested page does not exist.
  /api/admin/user/{licenseId}:
    delete:
      tags:
      - admin-user-api-controller
      summary: Deletes a user.
      description: "Warning: this method is only successful if user has not taken\
        \ part of any competition previously or if it has joined no one."
      operationId: deleteUser
      parameters:
      - name: licenseId
        in: path
        description: License ID of user.
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Not allowed (there is not logged in user or it is not an administrator).
        "200":
          description: User deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Not able to delete user (user did not exist or user has taken
            part of any past or future competition)
  /api/admin/post/{id}:
    delete:
      tags:
      - admin-post-api-controller
      summary: Elimination of a post
      operationId: deletePost
      parameters:
      - name: id
        in: path
        description: Post id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Request is invalid because of empty or non-existant post retrieve
        "200":
          description: Elimination successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /api/admin/competition/{idCompetition}:
    delete:
      tags:
      - admin-competition-api-controller
      summary: Elimination of a competition
      operationId: showCompetitionToDelete
      parameters:
      - name: idCompetition
        in: path
        description: Identifier of competition to be deleted
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Request is invalid because of empty or non-existant competition
            retrieve
        "200":
          description: Elimination successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competition'
components:
  schemas:
    UserProfileDTO:
      type: object
      properties:
        licenseId:
          type: string
        belt:
          pattern: "B|BAm|Am|AmN|NV|V|VAz|Az|AzM|M|N10|N[1-9]?"
          type: string
        gym:
          type: string
        weight:
          type: integer
          format: int32
        refereeRange:
          type: string
        phone:
          pattern: "(?=.*\\d).{9}"
          type: string
        email:
          pattern: "^[A-Za-z0-9+_.-]+@(.+)$"
          type: string
      description: User profile Data Transfer Object.
    User:
      type: object
      properties:
        licenseId:
          type: string
        name:
          type: string
        surname:
          type: string
        gender:
          type: string
          enum:
          - H
          - M
        phone:
          type: integer
          format: int32
        email:
          type: string
        dni:
          type: string
        nickname:
          type: string
        securityQuestion:
          type: string
        securityAnswer:
          type: string
        belt:
          type: string
          enum:
          - B
          - BAm
          - Am
          - AmN
          - "N"
          - NV
          - V
          - VAz
          - Az
          - AzM
          - M
          - N1
          - N2
          - N3
          - N4
          - N5
          - N6
          - N7
          - N8
          - N9
          - N10
        gym:
          type: string
        weight:
          type: integer
          format: int32
        refereeRange:
          type: string
          enum:
          - S
          - E
          - C
          - A
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - C
            - R
            - A
        imageFile:
          type: string
        birthdate:
          type: string
    Post:
      type: object
      properties:
        idPost:
          type: integer
          format: int32
        author:
          $ref: '#/components/schemas/User'
        title:
          type: string
        body:
          type: string
        mimeImage:
          type: string
        timestamp:
          type: string
          format: date-time
        formattedEditionTimestamp:
          type: string
    Competition:
      type: object
      properties:
        idCompetition:
          type: integer
          format: int32
        shortName:
          type: string
        additionalInfo:
          type: string
        minWeight:
          type: integer
          format: int32
        maxWeight:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        referee:
          $ref: '#/components/schemas/User'
        formattedStartDate:
          type: string
        formattedEndDate:
          type: string
    CompetitionResultDTO:
      type: object
      properties:
        idCompetition:
          type: string
        winner:
          type: string
        loser:
          type: string
    AdminUserEditionDTO:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        gender:
          pattern: M|H
          type: string
        phone:
          pattern: "(?=.*\\d).{9}"
          type: string
        email:
          pattern: "^[A-Za-z0-9+_.-]+@(.+)$"
          type: string
        birthDate:
          pattern: "^([0-2][0-9]|3[0-1])/(0[1-9]|1[0-2])/([0-9][0-9])?[0-9][0-9]$"
          type: string
        dni:
          pattern: "^([0-9]{8}|[XYZ][0-9]{7})[A-Z]{1}$"
          type: string
        licenseId:
          pattern: "JU-[0-9]{10}$|[0-9]{10}$"
          type: string
        nickname:
          type: string
        belt:
          pattern: "B|BAm|Am|AmN|NV|V|VAz|Az|AzM|M|N10|N[1-9]?"
          type: string
        gym:
          type: string
        weight:
          type: integer
          format: int32
        refereeRange:
          type: string
      description: Admin user edition Data Transfer Object.
    PostDTO:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        body:
          type: string
      description: Post DTO
    CompetitionDTO:
      type: object
      properties:
        idCompetition:
          type: string
        shortName:
          type: string
        additionalInfo:
          type: string
        minWeight:
          type: string
        maxWeight:
          type: string
        startDate:
          pattern: "^([0-2][0-9]|3[0-1])/(0[0-9]|1[0-2])/([0-9][0-9])?[0-9][0-9] [012]?[0-9]:[0-5][0-9]$"
          type: string
        endDate:
          pattern: "^([0-2][0-9]|3[0-1])/(0[0-9]|1[0-2])/([0-9][0-9])?[0-9][0-9] [012]?[0-9]:[0-5][0-9]$"
          type: string
        referee:
          type: string
    RefereeDTO:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        gender:
          pattern: M|H
          type: string
        phone:
          pattern: "(?=.*\\d).{9}"
          type: string
        email:
          pattern: "^[A-Za-z0-9+_.-]+@(.+)$"
          type: string
        birthDate:
          pattern: "^([0-2][0-9]|3[0-1])/(0[1-9]|1[0-2])/([0-9][0-9])?[0-9][0-9]$"
          type: string
        dni:
          pattern: "^([0-9]{8}|[XYZ][0-9]{7})[A-Z]{1}$"
          type: string
        licenseId:
          pattern: "JU-[0-9]{10}$|[0-9]{10}$"
          type: string
        nickname:
          type: string
        belt:
          pattern: "B|BAm|Am|AmN|NV|V|VAz|Az|AzM|M|N10|N[1-9]?"
          type: string
        password:
          pattern: "(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
          type: string
        securityQuestion:
          type: string
        securityAnswer:
          type: string
      description: Referee Data Transfer Object.
    CompetitorDTO:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        gender:
          pattern: M|H
          type: string
        phone:
          pattern: "(?=.*\\d).{9}"
          type: string
        email:
          pattern: "^[A-Za-z0-9+_.-]+@(.+)$"
          type: string
        birthDate:
          pattern: "^([0-2][0-9]|3[0-1])/(0[1-9]|1[0-2])/([0-9][0-9])?[0-9][0-9]$"
          type: string
        dni:
          pattern: "^([0-9]{8}|[XYZ][0-9]{7})[A-Z]{1}$"
          type: string
        licenseId:
          pattern: "JU-[0-9]{10}$|[0-9]{10}$"
          type: string
        nickname:
          type: string
        belt:
          pattern: "B|BAm|Am|AmN|NV|V|VAz|Az|AzM|M|N10|N[1-9]?"
          type: string
        password:
          pattern: "(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
          type: string
        securityQuestion:
          type: string
        securityAnswer:
          type: string
        gym:
          type: string
        weight:
          type: integer
          format: int32
      description: Competitor Data Transfer Object.
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      description: Login request
    RankingDTO:
      type: object
      properties:
        nickname:
          type: string
        sum:
          type: integer
          format: int32
        num:
          type: integer
          format: int32
        licenseId:
          type: string
        name:
          type: string
        surname:
          type: string
        dni:
          type: string
        belt:
          type: string
    Competition_MainAttributes:
      type: object
      properties:
        idCompetition:
          type: integer
          format: int32
        shortName:
          type: string
        additionalInfo:
          type: string
        minWeight:
          type: integer
          format: int32
        maxWeight:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        referee:
          $ref: '#/components/schemas/User_MainAttributes'
        formattedStartDate:
          type: string
        formattedEndDate:
          type: string
    User_MainAttributes:
      type: object
      properties:
        licenseId:
          type: string
        name:
          type: string
        surname:
          type: string
        gender:
          type: string
          enum:
          - H
          - M
        phone:
          type: integer
          format: int32
        email:
          type: string
        dni:
          type: string
        nickname:
          type: string
        securityQuestion:
          type: string
        securityAnswer:
          type: string
        belt:
          type: string
          enum:
          - B
          - BAm
          - Am
          - AmN
          - "N"
          - NV
          - V
          - VAz
          - Az
          - AzM
          - M
          - N1
          - N2
          - N3
          - N4
          - N5
          - N6
          - N7
          - N8
          - N9
          - N10
        gym:
          type: string
        weight:
          type: integer
          format: int32
        refereeRange:
          type: string
          enum:
          - S
          - E
          - C
          - A
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - C
            - R
            - A
        imageFile:
          type: string
        birthdate:
          type: string
